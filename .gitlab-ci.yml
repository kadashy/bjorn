
## Ci/CD para los desarollos de Java 11 en NSR en GitLab

stages:
  - tag
  - package
  - dependency-check
  - credentials
  - build
  - clair
  - publish
  - clean
  - deploy

detect-secrets:
  stage: detect-secrets
  image:
    name: registrysecaas.azurecr.io/secaas/detect-secrets-cli:latest
  variables:
    SECAAS_PLUGIN_ID: $SECAAS_PLUGIN_ID
    SECAAS_PLUGIN_SECRET: $SECAAS_PLUGIN_SECRET
    BUSINESS_ID: $BUSINESS_ID
  script:
    - entrypoint detect-secrets-cli
  tags:
    - k8s-runner
  except:
    - test
    - master

unit-test:
  image: registrysecaas.azurecr.io/secaas/maven:3-latest-jdk-11
  stage: unit-test
  services:
    - docker:18.09.7-dind
  script:
    - mvn -s settings.nexus.xml -f pom.xml test
  except:
    - test
    - master
  tags:
    - k8s-runner
  artifacts:
    paths:
      - target

integration-test:
  image: registrysecaas.azurecr.io/secaas/maven:3-latest-jdk-11
  stage: integration-test
  services:
    - docker:18.09.7-dind
  script:
    - mvn -s settings.nexus.xml -f pom.xml integration-test
  only:
    - NMDO-358-1
  tags:
    - k8s-runner
  artifacts:
    paths:
      - target

coverage:
  image: registrysecaas.azurecr.io/secaas/maven:3-latest-jdk-11
  stage: coverage
  script:
    - mvn -s settings.nexus.xml -f pom.xml jacoco:report
  except:
    - test
    - master
  tags:
    - k8s-runner

sonar-scan:
  stage: sonarqube-scan
  image:
    name: registrysecaas.azurecr.io/secaas/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    GIT_DEPTH: 0
  script:
    - $CI_PROJECT_DIR/ci-tools/executescan.sh ${CI_PROJECT_NAME} ${SONAR_URL} ${SONAR_LOGIN} >> .outputscan.log
    - cat .outputscan.log
  except:
    - test
    - master
  tags:
    - k8s-runner
  artifacts:
    paths:
      - .outputscan.log

sonar-check:
  stage: sonar-check
  image:
    name: registrysecaas.azurecr.io/secaas/sonar-scanner-cli:latest
  script:
    - $CI_PROJECT_DIR/ci-tools/reviewsonar.sh ${CI_PROJECT_NAME} ${SONAR_URL} ${USER_SONAR} ${PASS_SONAR}
  allow_failure: true
  except:
    - test
    - master
  tags:
    - k8s-runner

tag:
  image: registrysecaas.azurecr.io/secaas/maven:3-latest-jdk-11
  stage: tag
  script:
    - BUILD_VERSION=$(cat pom.xml | grep "\<version\>" -m  2 | cut -d ">" -f 2 | cut -d "<" -f 1 | tr -d '[:space:]')
    - echo $BUILD_VERSION > .version
    - cat .version
  only:
    - develop
    - test
    - master
  tags:
    - k8s-runner
  artifacts:
    paths:
      - .version

package:
  image: registrysecaas.azurecr.io/secaas/maven:3-latest-jdk-11
  stage: package
  script:
    - mvn -s settings.nexus.xml package -DskipTests=true -q
    - mv target/*.jar target/app.jar
  only:
    - develop
  tags:
    - k8s-runner
  artifacts:
    when: always
    name: ${CI_COMMIT_REF_SLUG}
    paths:
      - target
      - .version

dependency-check-analysis:
  stage: dependency-check
  image: registrysecaas.azurecr.io/secaas/dependency-check:v-2.1-5.1.1
  services: []
  variables:
    CI_JOB: 'true'
    DC_PROJECT_NAME: '$CI_PROJECT_NAME'
    DC_TARGET_LANG: 'java'
    PROJECT_NAME: '$CI_PROJECT_NAME'
    DC_BUSINESS_NAME: 'sodimac-dad'
  script:
    - dependency-cli
  allow_failure: true
  artifacts:
    when: always
    name: $CI_COMMIT_REF_SLUG-dependency
    paths:
      - dependency-check-report.html
      - .version
  tags:
    - dependencyCheck
  except:
    - test
    - master

credentials-dev:
  image: registrysecaas.azurecr.io/secaas/gcp-sdk:latest
  stage: credentials
  script:
    - echo ${NSR_GCR_ORMG_AUTH} | base64 -d > gcp_account.json
    - gcloud auth activate-service-account --key-file=gcp_account.json
    - GCR_PULL_KEY=$(gcloud auth print-access-token)
    - echo "$GCR_PULL_KEY" > .envdev
  only:
    - develop
  tags:
    - k8s-runner
  artifacts:
    when: always
    name: ${CI_COMMIT_REF_SLUG}
    paths:
      - .envdev
      - .version

credentials-test:
  image: registrysecaas.azurecr.io/secaas/gcp-sdk:latest
  stage: credentials
  script:
    - echo ${NSR_GCR_ORMG_AUTH} | base64 -d > gcp_account_dev.json
    - gcloud auth activate-service-account --key-file=gcp_account_dev.json
    - GCR_PULL_KEY_DEV=$(gcloud auth print-access-token)
    - echo "$GCR_PULL_KEY_DEV" > .envdev
    - echo ${NSR_GCR_ORMG_AUTH_TEST} | base64 -d > gcp_account_test.json
    - gcloud auth activate-service-account --key-file=gcp_account_test.json
    - GCR_PULL_KEY_TEST=$(gcloud auth print-access-token)
    - echo "$GCR_PULL_KEY_TEST" > .envtest
  only:
    - test
  tags:
    - k8s-runner
  artifacts:
    when: always
    name: ${CI_COMMIT_REF_SLUG}
    paths:
      - .envdev
      - .envtest
      - .version

credentials-prod:
  image: registrysecaas.azurecr.io/secaas/gcp-sdk:latest
  stage: credentials
  script:
    - echo ${NSR_GCR_ORMG_AUTH} | base64 -d > gcp_account_dev.json
    - gcloud auth activate-service-account --key-file=gcp_account_dev.json
    - GCR_PULL_KEY_DEV=$(gcloud auth print-access-token)
    - echo "$GCR_PULL_KEY_DEV" > .envdev
    - echo ${NSR_GCR_ORMG_AUTH_PROD} | base64 -d > gcp_account_prod.json
    - gcloud auth activate-service-account --key-file=gcp_account_prod.json
    - GCR_PULL_KEY_PROD=$(gcloud auth print-access-token)
    - echo "$GCR_PULL_KEY_PROD" > .envprod
  only:
    - master
  tags:
    - k8s-runner
  artifacts:
    when: always
    name: ${CI_COMMIT_REF_SLUG}
    paths:
      - .envdev
      - .envprod
      - .version

build-dev:
  image: docker:stable-dind
  stage: build
  services:
    - docker:18.09.7-dind
  script:
    - mkdir ~/.docker
    - echo $DOCKER_AUTH_CONFIG >> ~/.docker/config.json
    - VERSION=$(cat .version)
    - docker build -t us.gcr.io/"${GCP_PROJECT_ID_ORMG_DEV}"/tmp/"${CI_PROJECT_NAME}":$VERSION .
    - GCR_PULL_KEY=$(cat .envdev)
    - docker login -u oauth2accesstoken -p $GCR_PULL_KEY us.gcr.io
    - docker push us.gcr.io/"${GCP_PROJECT_ID_ORMG_DEV}"/tmp/"${CI_PROJECT_NAME}":$VERSION
  only:
    - develop
  artifacts:
    paths:
      - .version
  tags:
    - k8s-runner

clair-analysis:
  stage: clair
  image: "registrysecaas.azurecr.io/secaas/clair-tool:latest"
  services: []
  variables:
    CLAIR_URL: "http://clair-secaas.buffetcloud.io:6060"
    REGISTRY_USER: oauth2accesstoken
  script:
    - VERSION=$(cat .version)
    - export REGISTRY_PASSWORD=$(cat .envdev)
    - ARTIFACT=us.gcr.io/"${GCP_PROJECT_ID_ORMG_DEV}"/tmp/"${CI_PROJECT_NAME}":"$VERSION"
    - echo $ARTIFACT
    - SCAN_IMAGE=$ARTIFACT clair-tool
  allow_failure: true
  only:
    - develop
  tags:
    - k8s-runner

publish-dev:
  image: docker:stable-dind
  stage: publish
  services:
    - docker:18.09.7-dind
  script:
    - mkdir ~/.docker
    - echo $DOCKER_AUTH_CONFIG >> ~/.docker/config.json
    - VERSION=$(cat .version)
    - GCR_PULL_KEY_DEV=$(cat .envdev)
    - docker login -u oauth2accesstoken -p $GCR_PULL_KEY_DEV us.gcr.io
    - docker pull us.gcr.io/$GCP_PROJECT_ID_ORMG_DEV/tmp/"${CI_PROJECT_NAME}":$VERSION
    - docker tag us.gcr.io/$GCP_PROJECT_ID_ORMG_DEV/tmp/"${CI_PROJECT_NAME}":$VERSION us.gcr.io/$GCP_PROJECT_ID_ORMG_DEV/"${CI_PROJECT_NAME}":$VERSION
    - docker push us.gcr.io/$GCP_PROJECT_ID_ORMG_DEV/"${CI_PROJECT_NAME}":$VERSION
  only:
    - develop
  tags:
    - k8s-runner

clean-tmp:
  image: registrysecaas.azurecr.io/secaas/gcp-sdk:latest
  stage: clean
  script:
    - VERSION=$(cat .version)
    - echo ${NSR_GCR_ORMG_AUTH} | base64 -d > gcp_account.json
    - gcloud auth activate-service-account --key-file=gcp_account.json
    - gcloud container images delete us.gcr.io/$GCP_PROJECT_ID_ORMG_DEV/tmp/"${CI_PROJECT_NAME}":$VERSION --force-delete-tags --quiet
  only:
    - develop
  tags:
    - k8s-runner

build-test:
  image: docker:stable-dind
  stage: build
  services:
    - docker:18.09.7-dind
  script:
    - mkdir ~/.docker
    - echo $DOCKER_AUTH_CONFIG >> ~/.docker/config.json
    - VERSION=$(cat .version)
    - GCR_PULL_KEY_DEV=$(cat .envdev)
    - docker login -u oauth2accesstoken -p $GCR_PULL_KEY_DEV us.gcr.io
    - docker pull us.gcr.io/$GCP_PROJECT_ID_ORMG_DEV/"${CI_PROJECT_NAME}":$VERSION
    - docker tag us.gcr.io/$GCP_PROJECT_ID_ORMG_DEV/"${CI_PROJECT_NAME}":$VERSION us.gcr.io/$GCP_PROJECT_ID_ORMG_TEST/"${CI_PROJECT_NAME}":$VERSION
    - GCR_PULL_KEY_TEST=$(cat .envtest)
    - docker login -u oauth2accesstoken -p $GCR_PULL_KEY_TEST us.gcr.io
    - docker push us.gcr.io/$GCP_PROJECT_ID_ORMG_TEST/"${CI_PROJECT_NAME}":$VERSION
  only:
    - test
  tags:
    - k8s-runner

build-prod:
  image: docker:stable-dind
  stage: build
  services:
    - docker:18.09.7-dind
  script:
    - mkdir ~/.docker
    - echo $DOCKER_AUTH_CONFIG >> ~/.docker/config.json
    - VERSION=$(cat .version)
    - GCR_PULL_KEY_DEV=$(cat .envdev)
    - docker login -u oauth2accesstoken -p $GCR_PULL_KEY_DEV us.gcr.io
    - docker pull us.gcr.io/$GCP_PROJECT_ID_ORMG_DEV/"${CI_PROJECT_NAME}":$VERSION
    - docker tag us.gcr.io/$GCP_PROJECT_ID_ORMG_DEV/"${CI_PROJECT_NAME}":$VERSION us.gcr.io/$GCP_PROJECT_ID_ORMG_PROD/"${CI_PROJECT_NAME}":$VERSION
    - GCR_PULL_KEY_PROD=$(cat .envprod)
    - docker login -u oauth2accesstoken -p $GCR_PULL_KEY_PROD us.gcr.io
    - docker push us.gcr.io/$GCP_PROJECT_ID_ORMG_PROD/"${CI_PROJECT_NAME}":$VERSION
  only:
    - master
  artifacts:
    paths:
      - .version
  tags:
    - k8s-runner

deploy-test:
  image: sodimacdad.azurecr.io/sodimac-dad/docker-kube-gutil:stable
  stage: deploy
  script:
    - export VERSION=$(cat .version)
    - export EXTENV=test
    - export VARENV=TS
    - export ENVIRONMENT=test
    - export PROJECTID=$GCP_PROJECT_ID_ORMG_TEST
    - export APPNAME=${CI_PROJECT_NAME//-/}
    - echo $APPNAME
    - echo ${NSR_GKE_ORMG_AUTH_TEST} | base64 -d > gcp_account.json
    - gcloud auth activate-service-account --key-file gcp_account.json
    - gcloud config set project $GCP_PROJECT_ID_ORMG_TEST
    - gcloud container clusters get-credentials $CLUSTER_NAME_ORMG_TEST --zone $CLUSTER_ZONE_TEST --project $GCP_PROJECT_ID_ORMG_TEST
    - bash ci-tools/replace.sh
    - kubectl apply -f pipeline/cd/deployment.yml
    - kubectl get pods
    - kubectl apply -f pipeline/cd/service.yml
    - kubectl get services
  environment:
    name: develop
  only:
    - test
  tags:
    - k8s-runner

deploy-prod:
  image: sodimacdad.azurecr.io/sodimac-dad/docker-kube-gutil:stable
  stage: deploy
  script:
    - export VERSION=$(cat .version)
    - export EXTENV=master
    - export VARENV=PR
    - export ENVIRONMENT=prod
    - export PROJECTID=$GCP_PROJECT_ID_ORMG_PROD
    - export APPNAME=${CI_PROJECT_NAME//-/}
    - echo $APPNAME
    - echo ${NSR_GKE_ORMG_AUTH_PROD} | base64 -d > gcp_account.json
    - gcloud auth activate-service-account --key-file gcp_account.json
    - gcloud config set project $GCP_PROJECT_ID_ORMG_PROD
    - gcloud container clusters get-credentials $CLUSTER_NAME_ORMG_PROD --zone $CLUSTER_ZONE_PROD --project $GCP_PROJECT_ID_ORMG_PROD
    - bash ci-tools/replace.sh
    - kubectl apply -f pipeline/cd/deployment.yml
    - kubectl get pods
    - kubectl apply -f pipeline/cd/service.yml
    - kubectl get services
  environment:
    name: master
  only:
    - master
  tags:
    - k8s-runner
